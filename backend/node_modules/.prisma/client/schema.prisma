// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AgeGroup {
  id        String   @id @default(cuid())
  name      String   @unique // U-8, U-10, U-12, U-14, U-16, U-18
  minAge    Int
  maxAge    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams            Team[]
  tournaments      Tournament[]
  tournamentTables TournamentTable[]

  @@map("age_groups")
}

model Team {
  id          String    @id @default(cuid())
  name        String
  description String?
  logo        String? // URL to logo image
  founded     DateTime?
  ageGroupId  String
  coach       String? // Deprecated - use coaches relation instead
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  ageGroup        AgeGroup         @relation(fields: [ageGroupId], references: [id], onDelete: Cascade)
  players         Player[]
  coaches         Coach[]
  homeMatches     Match[]          @relation("HomeTeam")
  awayMatches     Match[]          @relation("AwayTeam")
  tournamentTeams TournamentTeam[]
  photos          Photo[]
  videos          Video[]

  @@map("teams")
}

model Player {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  position    String // Воротар, Захисник, Півзахисник, Нападник
  number      Int?
  photo       String? // URL to player photo
  teamId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team  Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  stats PlayerStats[]

  @@unique([teamId, number])
  @@map("players")
}

model PlayerStats {
  id          String   @id @default(cuid())
  playerId    String
  season      String // 2023-2024
  matches     Int      @default(0)
  goals       Int      @default(0)
  assists     Int      @default(0)
  yellowCards Int      @default(0)
  redCards    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, season])
  @@map("player_stats")
}

model Match {
  id         String      @id @default(cuid())
  homeTeamId String
  awayTeamId String
  homeScore  Int?
  awayScore  Int?
  matchDate  DateTime
  location   String?
  status     MatchStatus @default(SCHEDULED)
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  homeTeam Team    @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam Team    @relation("AwayTeam", fields: [awayTeamId], references: [id])
  photos   Photo[]
  videos   Video[]

  @@map("matches")
}

enum MatchStatus {
  SCHEDULED
  LIVE
  FINISHED
  CANCELLED
}

model Tournament {
  id          String    @id @default(cuid())
  name        String
  season      String // 2023-2024
  ageGroupId  String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  ageGroup        AgeGroup         @relation(fields: [ageGroupId], references: [id])
  tournamentTeams TournamentTeam[]
  tournamentTable TournamentTable?

  @@map("tournaments")
}

model TournamentTeam {
  id           String @id @default(cuid())
  tournamentId String
  teamId       String
  teamName     String // Назва команди на момент турніру

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  team       Team       @relation(fields: [teamId], references: [id])

  @@unique([tournamentId, teamId])
  @@map("tournament_teams")
}

model TournamentTable {
  id           String   @id @default(cuid())
  tournamentId String   @unique
  ageGroupId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tournament Tournament           @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  ageGroup   AgeGroup             @relation(fields: [ageGroupId], references: [id])
  standings  TournamentStanding[]

  @@map("tournament_tables")
}

model TournamentStanding {
  id             String @id @default(cuid())
  tableId        String
  teamName       String
  matches        Int    @default(0)
  wins           Int    @default(0)
  draws          Int    @default(0)
  losses         Int    @default(0)
  goalsFor       Int    @default(0)
  goalsAgainst   Int    @default(0)
  goalDifference Int    @default(0)
  points         Int    @default(0)
  position       Int

  table TournamentTable @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, position])
  @@map("tournament_standings")
}

model News {
  id          String    @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  image       String? // URL to featured image
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("news")
}

model Photo {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  teamId      String?
  matchId     String?
  category    String   @default("general") // general, team, match, training
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team  Team?  @relation(fields: [teamId], references: [id])
  match Match? @relation(fields: [matchId], references: [id])

  @@map("photos")
}

model Video {
  id          String    @id @default(cuid())
  title       String
  description String?
  url         String // URL for uploaded video or external link (YouTube, etc.)
  type        VideoType @default(UPLOAD) // UPLOAD for local files, YOUTUBE, VIMEO, etc.
  thumbnail   String? // URL to video thumbnail
  teamId      String?
  matchId     String?
  category    String    @default("general") // general, team, match, training, highlights
  duration    Int? // duration in seconds
  published   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  team  Team?  @relation(fields: [teamId], references: [id])
  match Match? @relation(fields: [matchId], references: [id])

  @@map("videos")
}

enum VideoType {
  UPLOAD
  YOUTUBE
  VIMEO
  OTHER
}

model Training {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  startTime   String // HH:MM format
  endTime     String // HH:MM format
  location    String
  teamId      String?
  ageGroupId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("trainings")
}

model Coach {
  id           String    @id @default(cuid())
  firstName    String
  lastName     String
  position     String // Головний тренер, Асистент тренера, Тренер воротарів
  experience   Int? // років досвіду
  photo        String? // URL to coach photo
  biography    String?
  phone        String?
  email        String?
  dateOfBirth  DateTime?
  achievements String? // Досягнення тренера
  teamId       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  team Team? @relation(fields: [teamId], references: [id])

  @@map("coaches")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum UserRole {
  USER
  COACH
  ADMIN
}
